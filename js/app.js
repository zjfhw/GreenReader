// Generated by CoffeeScript 1.3.3
var mainNavJson, nimei, pp, pullDownAction, store;

nimei = 'entries';

store = Lawnchair({
  name: nimei,
  record: 'entry'
}, function() {});

pp = Lawnchair({
  name: 'piaopiao',
  record: 'entry'
}, function() {
  return this.save({
    entry: 'meide'
  });
});

RSSReader.reopen({
  ready: function() {
    this._super();
    RSSReader.GetItemsFromStore('showDefault');
    RSSReader.navbarController.mainPage();
    return jQT.initbars();
  }
});

mainNavJson = [
  {
    id: '#settings',
    title: 'Settings',
    icon: '',
    count: 3
  }, {
    id: '#main',
    title: 'Main',
    icon: '',
    count: 4
  }
];

RSSReader.Item = Em.Object.extend({
  read: false,
  starred: false,
  item_id: null,
  title: null,
  short_desc: null,
  content: null,
  pub_name: null,
  pub_author: null,
  pub_date: new Date(0),
  feed_link: null,
  item_link: null
});

RSSReader.NavButton = Em.Object.extend({
  url: null,
  title: null,
  icon: null,
  count: null
});

RSSReader.dataController = Em.ArrayController.create({
  content: [],
  addItem: function(item) {
    var exists, idx, length;
    exists = this.filterProperty('item_id', item.item_id).length;
    if (exists === 0) {
      length = this.get('length');
      idx = this.binarySearch(Date.parse(item.get('pub_date')), 0, length);
      this.insertAt(idx, item);
      return true;
    } else {
      return false;
    }
  },
  binarySearch: function(value, low, high) {
    var mid, midValue;
    if (low === high) {
      return low;
    }
    mid = low + Math.floor((high - low) / 2);
    midValue = Date.parse(this.objectAt(mid).get('pub_date'));
    if (value < midValue) {
      return this.binarySearch(value, mid + 1, high);
    } else if (value > midValue) {
      return this.binarySearch(value, low, mid);
    }
    return mid;
  },
  itemCount: (function() {
    return this.get('length');
  }).property('@each'),
  readCount: (function() {
    return this.filterProperty('read', true).get('length');
  }).property('@each.read'),
  unreadCount: (function() {
    return this.filterProperty('read', false).get('length');
  }).property('@each.read'),
  starredCount: (function() {
    return this.filterProperty('starred', true).get('length');
  }).property('@each.starred')
});

RSSReader.itemController = Em.ArrayController.create({
  content: [],
  currentList: 'showDefault',
  refreshList: function(callbackFn) {
    console.log('currentList', this.get('currentList'));
    return RSSReader.GetItemsFromStore(this.get('currentList'), callbackFn);
  },
  filterBy: function(key, value) {
    return this.set('content', RSSReader.dataController.filterProperty(key, value));
  },
  clearFilter: function() {
    return this.set('content', RSSReader.dataController.get('content'));
  },
  showDefault: function() {
    return this.filterBy('read', false);
  },
  showAll: function() {
    return clearFilter();
  },
  showRead: function() {
    return this.filterBy('read', true);
  },
  showStarred: function() {
    return this.filterBy('starred', true);
  },
  showUnread: function() {
    return this.filterBy('read', false);
  },
  markAllRead: function() {
    return this.forEach(function(item) {
      return item.set('read', true);
    });
  },
  itemCount: (function() {
    return this.get('length');
  }).property('@each'),
  readCount: (function() {
    return this.filterProperty('read', true).get('length');
  }).property('@each.read'),
  unreadCount: (function() {
    return this.filterProperty('read', false).get('length');
  }).property('@each.read'),
  starredCount: (function() {
    return this.filterProperty('starred', true).get('length');
  }).property('@each.starred')
});

RSSReader.itemNavController = Em.Object.create({
  currentItem: null,
  hasPrev: false,
  hasNext: false,
  select: function(item) {
    var currentIndex;
    if (item) {
      this.set('currentItem', item);
      this.toggleRead(true);
      currentIndex = RSSReader.itemController.content.indexOf(this.get('currentItem'));
      this.set('hasNext', currentIndex + 1 < RSSReader.itemController.get('itemCount'));
      return this.set('hasPrev', currentIndex !== 0);
    } else {
      this.set('hasPrev', false);
      return this.set('hasNext', false);
    }
  },
  toggleRead: function(read) {
    var key;
    if (read === void 0) {
      read = !this.currentItem.get('read');
    }
    this.currentItem.set('read', read);
    key = this.currentItem.get('item_id');
    return store.get(key, function(entry) {
      entry.read = read;
      return store.save(entry);
    });
  },
  toggleStar: function(star) {
    var key;
    if (star === void 0) {
      star = !this.currentItem.get('starred');
    }
    this.currentItem.set('starred', star);
    key = this.currentItem.get('item_id');
    return store.get(key, function(entry) {
      entry.starred = star;
      return store.save(entry);
    });
  },
  next: function() {
    var currentIndex, nextItem;
    currentIndex = RSSReader.itemController.content.indexOf(this.get('currentItem'));
    nextItem = RSSReader.itemController.content[currentIndex + 1];
    if (nextItem) {
      return this.select(nextItem);
    }
  },
  prev: function() {
    var currentIndex, prevItem;
    currentIndex = RSSReader.itemController.content.indexOf(this.get('currentItem'));
    prevItem = RSSReader.itemController.content[currentIndex - 1];
    if (prevItem) {
      return this.select(prevItem);
    }
  }
});

RSSReader.navbarController = Em.ArrayController.create({
  content: [],
  mainPage: function() {
    var btn, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = mainNavJson.length; _i < _len; _i++) {
      btn = mainNavJson[_i];
      _results.push(this.insertAt(0, RSSReader.NavButton.create(btn)));
    }
    return _results;
  },
  arrayDidChange: function() {
    return console.log('navbar add', this.get('content'));
  }
});

RSSReader.SummaryListView = RSSReader.ListView.extend({
  contentBinding: 'RSSReader.itemController.content',
  templateName: 'main',
  didInsertElement: function() {
    console.log('main insert');
    return Em.run.next(function() {
      return RSSReader.pullinit();
    });
  }
});

RSSReader.ListItemView.reopen({
  templateName: 'current',
  classNameBindings: ['read', 'starred'],
  read: (function() {
    var read;
    return read = this.get('content').get('read');
  }).property('RSSReader.itemController.@each.read'),
  starred: (function() {
    var starred;
    return starred = this.get('content').get('starred');
  }).property('RSSReader.itemController.@each.starred'),
  click: function(evt) {
    var content;
    console.log('select', this.get('content'));
    content = this.get('content');
    RSSReader.itemNavController.select(content);
    return jQT.goTo('#current-view', 'slideleft');
  },
  dateFromNow: (function() {
    return moment(this.get('content').get('pub_date')).fromNow();
  }).property('RSSReader.itemController.@each.pub_date')
});

RSSReader.HeaderView.reopen({
  refresh: function() {
    return RSSReader.GetItemsFromStore();
  }
});

RSSReader.FooterNavBarView = Em.View.extend({
  contentBinding: 'RSSReader.navbarController.content',
  click: function() {
    return console.log('nimeia');
  }
});

RSSReader.NavbarView.reopen({
  currentListBinding: 'RSSReader.itemController.currentList',
  itemCountBinding: 'RSSReader.dataController.itemCount',
  unreadCountBinding: 'RSSReader.dataController.unreadCount',
  starredCountBinding: 'RSSReader.dataController.starredCount',
  readCountBinding: 'RSSReader.dataController.readCount',
  showAll: function() {
    RSSReader.itemController.clearFilter();
    return this.set('currentList', 'showAll');
  },
  showUnread: function() {
    RSSReader.itemController.filterBy('read', false);
    return this.set('currentList', 'showUnread');
  },
  showRead: function() {
    RSSReader.itemController.filterBy('read', true);
    return this.set('currentList', 'showRead');
  },
  showStarred: function() {
    RSSReader.itemController.filterBy('starred', true);
    return this.set('currentList', 'showStarred');
  }
});

RSSReader.EntryItemView = RSSReader.ContentView.extend({
  active: (function() {
    return true;
  }).property('RSSReader.itemNavController.currentItem'),
  contentBinding: 'RSSReader.itemNavController.currentItem',
  viewDidChange: (function() {
    console.log('view change');
    return jQT.setPageHeight();
  }).observes('content')
});

RSSReader.EntryFooterView = RSSReader.FooterView.extend({
  'data-position': 'fixed',
  contentBinding: 'RSSReader.itemNavController.currentItem',
  toggleRead: function() {
    return RSSReader.itemNavController.toggleRead();
  },
  toggleStar: function() {
    return RSSReader.itemNavController.toggleStar();
  },
  starClass: (function() {
    var currentItem;
    currentItem = RSSReader.itemNavController.get('currentItem');
    if (currentItem && currentItem.get('starred')) {
      return 'starred';
    }
    return 'star-empty';
  }).property('RSSReader.itemNavController.currentItem.starred'),
  readClass: (function() {
    var currentItem;
    currentItem = RSSReader.itemNavController.get('currentItem');
    if (currentItem && currentItem.get('read')) {
      return 'read';
    }
    return 'unread';
  }).property('RSSReader.itemNavController.currentItem.read'),
  nextpage: function() {
    return RSSReader.itemNavController.next();
  },
  prevpage: function() {
    return RSSReader.itemNavController.prev();
  },
  nextDisable: (function() {
    return !RSSReader.itemNavController.get('hasNext');
  }).property('RSSReader.itemNavController.currentItem.next'),
  prevDisable: (function() {
    return !RSSReader.itemNavController.get('hasPrev');
  }).property('RSSReader.itemNavController.currentItem.prev')
});

RSSReader.GetItemsFromStore = function(currentList, callback) {
  var feed, feedPipeURL, items;
  items = store.all(function(arr) {
    arr.forEach(function(entry) {
      var item;
      item = RSSReader.Item.create(entry);
      return RSSReader.dataController.addItem(item);
    });
    return console.log('entries load form local:', arr.length);
  });
  feed = 'http://cn.engadget.com/rss.xml';
  feed = encodeURIComponent(feed);
  feedPipeURL = "http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20xml%20where%20url%3D'";
  feedPipeURL += feed + "'&format=json";
  console.log('getting sourc as json', feedPipeURL);
  return $.getJSON(feedPipeURL, function(data) {
    var feedLink;
    console.log(data.query.results);
    items = data.query.results.rss.channel.item;
    feedLink = data.query.results.rss.channel.link;
    items.map(function(entry) {
      var item;
      item = {};
      item.item_id = entry.guid.content;
      item.pub_name = data.query.results.rss.channel.title;
      item.pub_author = entry.author;
      item.title = entry.title;
      item.feed_link = feedLink;
      item.content = entry.description;
      if (entry.origLink) {
        item.item_link = entry.origLink;
      } else {
        item.item_link = entry.link;
      }
      if (entry.description) {
        item.short_desc = $(entry.description).text().substr(0, 128) + "...";
      }
      item.pub_date = new Date(entry.pubDate);
      item.read = false;
      item.key = item.item_id;
      if (RSSReader.dataController.addItem(RSSReader.Item.create(item))) {
        return store.save(item);
      }
    });
    if (!currentList) {
      currentList = "showDefault";
    }
    RSSReader.itemController[currentList]();
    if (callback) {
      return callback();
    }
  });
};

$(function() {
  var c, v;
  $('.swipe').swipe(function(evt, info) {
    console.log('tap', info.direction);
    if (info.direction === 'right') {
      return RSSReader.itemNavController.prev();
    } else if (info.direction === 'left') {
      return RSSReader.itemNavController.next();
    }
  });
  v = RSSReader.get('mainView');
  if (!v) {
    console.log('main not created');
    v = App.MainView.create();
    RSSReader.set('mainView', v);
    v.appendTo($('#jqt'));
  }
  c = RSSReader.get('currentView');
  if (!c) {
    console.log('current not created');
    c = RSSReader.CurrentView.create();
    RSSReader.set('currentView', c);
    return c.appendTo($('#jqt'));
  }
});

pullDownAction = function(scroll) {
  return RSSReader.itemController.refreshList(function() {
    return scroll.refresh();
  });
};

RSSReader.pullinit = function() {
  var pullDownEl, pullDownOffset;
  pullDownEl = $('#pullDown');
  pullDownOffset = 51;
  return $('#main-view_wrapper_0').iscroll({
    topOffset: 51,
    onRefresh: function() {
      if (pullDownEl.hasClass('loading')) {
        pullDownEl.removeClass();
        return pullDownEl.find('pullDownLabel').html('PullDown to Refresh');
      }
    },
    onScrollMove: function() {
      if (this.y > 5 && !pullDownEl.hasClass('flip')) {
        pullDownEl.addClass('flip');
        pullDownEl.find('.pullDownLabel').html('Release to Refresh');
        return this.minScrollY = 0;
      } else if (this.y < 5 && !pullDownEl.hasClass('flip')) {
        pullDownEl.removeClass('flip');
        pullDownEl.find('.pullDownLabel').html('Pull down to refresh');
        return this.minScrollY = -pullDownOffset;
      }
    },
    onScrollEnd: function() {
      if (pullDownEl.hasClass('flip')) {
        pullDownEl.addClass('loading');
        pullDownEl.find('.pullDownLabel').html('Loading...');
        return pullDownAction(this);
      }
    }
  });
};
