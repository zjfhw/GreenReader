// Generated by CoffeeScript 1.3.3
var RSSReader, currentNavJson, listNavJson, mainNavJson, pullDownAction, store, subscriptionData;

store = Lawnchair({
  name: 'entries',
  record: 'entry'
}, function() {});

subscriptionData = Lawnchair({
  name: 'subscript',
  record: 'entry'
}, function() {});

RSSReader = Em.Application.create({
  ready: function() {
    this._super();
    RSSReader.getSubscription();
    RSSReader.navbarController.set('currentPage', mainNavJson);
    return jQT.initbars();
  }
});

mainNavJson = [
  {
    url: '#help-view',
    title: 'Help',
    icon: 'css/png/glyphicons_194_circle_question_mark.png'
  }, {
    url: '#about-view',
    title: 'About',
    icon: 'css/png/glyphicons_195_circle_info.png'
  }, {
    url: '#search-view',
    title: 'Search',
    icon: 'css/png/glyphicons_027_search.png'
  }, {
    url: '#settings-view',
    title: 'Setting',
    icon: 'css/png/glyphicons_019_cogwheel.png'
  }
];

listNavJson = [
  {
    url: '#',
    title: 'Unread',
    icon: 'css/png/glyphicons_051_eye_open.png',
    countName: 'unreadCount',
    action: 'showUnread'
  }, {
    url: '#',
    title: 'All',
    icon: 'css/png/glyphicons_071_book.png',
    countName: 'itemCount',
    action: 'showAll'
  }, {
    url: '#',
    title: 'Starred',
    icon: 'css/png/glyphicons_049_star.png',
    countName: 'starredCount',
    action: 'showStarred'
  }, {
    url: '#',
    title: 'Read',
    icon: 'css/png/glyphicons_087_log_book.png',
    countName: 'readCount',
    action: 'showRead'
  }
];

currentNavJson = [
  {
    url: '#list-view',
    title: 'Back',
    icon: 'css/png/glyphicons_051_eye_open.png'
  }, {
    url: '#',
    title: 'Star',
    icon: 'css/png/glyphicons_071_book.png'
  }, {
    url: '#',
    title: 'Share',
    icon: 'css/png/glyphicons_049_star.png'
  }, {
    url: '#',
    title: 'Read in Browser',
    icon: 'css/png/glyphicons_087_log_book.png'
  }
];

RSSReader.GetItemsFromStore = function(feed, currentList, callback) {
  var feedPipeURL, items;
  store = Lawnchair({
    name: feed,
    record: 'entry'
  }, function() {});
  items = store.all(function(arr) {
    arr.forEach(function(entry) {
      var item;
      item = RSSReader.Item.create(entry);
      return RSSReader.dataController.addItem(item);
    });
    return console.log('entries load form local:', arr.length);
  });
  if (!feed) {
    feed = 'http://cn.engadget.com/rss.xml';
  }
  feed = encodeURIComponent(feed);
  feedPipeURL = "http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20xml%20where%20url%3D'";
  feedPipeURL += feed + "'&format=json";
  console.log('getting sourc as json', feedPipeURL);
  return $.getJSON(feedPipeURL, function(data) {
    var feedLink;
    console.log(data.query.results);
    if (!data.query.results) {
      alert('check your url');
    }
    items = data.query.results.rss.channel.item;
    feedLink = data.query.results.rss.channel.link;
    items.map(function(entry) {
      var item;
      item = {};
      item.item_id = entry.guid.content;
      item.pub_name = data.query.results.rss.channel.title;
      item.pub_author = entry.author;
      item.title = entry.title;
      item.feed_link = feedLink;
      item.content = entry.description;
      if (entry.origLink) {
        item.item_link = entry.origLink;
      } else {
        item.item_link = entry.link;
      }
      if (entry.description) {
        item.short_desc = $(entry.description).text().substr(0, 128) + "...";
      }
      item.pub_date = new Date(entry.pubDate);
      item.read = false;
      item.key = item.item_id;
      if (RSSReader.dataController.addItem(RSSReader.Item.create(item))) {
        return store.save(item);
      }
    });
    if (!currentList) {
      currentList = "showDefault";
    }
    RSSReader.itemController[currentList]();
    if (callback) {
      return callback();
    }
  });
};

RSSReader.clearStore = function(key, callback) {
  Lawnchair({
    name: key
  }, function() {
    return this.nuke();
  });
  if (callback) {
    return callback();
  }
};

RSSReader.getSubscription = function() {
  var items;
  return items = subscriptionData.all(function(arr) {
    arr.forEach(function(entry) {
      var item;
      item = RSSReader.Subscription.create(entry);
      return RSSReader.subscriptionController.addItem(item);
    });
    return console.log('subscription load form local:', arr.length);
  });
};

$(function() {
  var c, v;
  $('.swipe').swipe(function(evt, info) {
    console.log('tap', info.direction);
    if (info.direction === 'right') {
      return RSSReader.itemNavController.prev();
    } else if (info.direction === 'left') {
      return RSSReader.itemNavController.next();
    }
  });
  v = RSSReader.get('listView');
  if (!v) {
    console.log('list not created');
    v = RSSReader.ListView.create();
    RSSReader.set('listView', v);
    v.appendTo($('#jqt'));
  }
  c = RSSReader.get('currentView');
  if (!c) {
    console.log('current not created');
    c = RSSReader.CurrentView.create();
    RSSReader.set('currentView', c);
    c.appendTo($('#jqt'));
  }
  $('#list-view').live('pageAnimationEnd', function(event, info) {
    if (info.direction === 'in') {
      RSSReader.navbarController.set('currentPage', listNavJson);
      return Em.run.next(function() {
        return jQT.initTabbar();
      });
    }
  });
  $('#main-view').live('pageAnimationEnd', function(event, info) {
    if (info.direction === 'in') {
      RSSReader.navbarController.set('currentPage', mainNavJson);
      return Em.run.next(function() {
        return jQT.initTabbar();
      });
    }
  });
  return $('#current-view').live('pageAnimationEnd', function(event, info) {
    if (info.direction === 'in') {
      RSSReader.navbarController.set('currentPage', currentNavJson);
      return Em.run.next(function() {
        return jQT.initTabbar();
      });
    }
  });
});

pullDownAction = function(scroll) {
  return RSSReader.itemController.refreshList(function() {
    return scroll.refresh();
  });
};

RSSReader.pullinit = function() {
  var pullDownEl, pullDownOffset;
  pullDownEl = $('#pullDown');
  pullDownOffset = 51;
  return $('.pullable').iscroll({
    topOffset: 51,
    onRefresh: function() {
      if (pullDownEl.hasClass('loading')) {
        pullDownEl.removeClass();
        return pullDownEl.find('pullDownLabel').html('PullDown to Refresh');
      }
    },
    onScrollMove: function() {
      if (this.y > 5 && !pullDownEl.hasClass('flip')) {
        pullDownEl.addClass('flip');
        pullDownEl.find('.pullDownLabel').html('Release to Refresh');
        return this.minScrollY = 0;
      } else if (this.y < 5 && !pullDownEl.hasClass('flip')) {
        pullDownEl.removeClass('flip');
        pullDownEl.find('.pullDownLabel').html('Pull down to refresh');
        return this.minScrollY = -pullDownOffset;
      }
    },
    onScrollEnd: function() {
      if (pullDownEl.hasClass('flip')) {
        pullDownEl.addClass('loading');
        pullDownEl.find('.pullDownLabel').html('Loading...');
        return pullDownAction(this);
      }
    }
  });
};

RSSReader.dataController = Em.ArrayController.create({
  content: [],
  addItem: function(item) {
    var exists, idx, length;
    exists = this.filterProperty('item_id', item.item_id).length;
    if (exists === 0) {
      length = this.get('length');
      idx = this.binarySearch(Date.parse(item.get('pub_date')), 0, length);
      this.insertAt(idx, item);
      return true;
    } else {
      return false;
    }
  },
  binarySearch: function(value, low, high) {
    var mid, midValue;
    if (low === high) {
      return low;
    }
    mid = low + Math.floor((high - low) / 2);
    midValue = Date.parse(this.objectAt(mid).get('pub_date'));
    if (value < midValue) {
      return this.binarySearch(value, mid + 1, high);
    } else if (value > midValue) {
      return this.binarySearch(value, low, mid);
    }
    return mid;
  },
  itemCount: (function() {
    return this.get('length');
  }).property('@each'),
  readCount: (function() {
    return this.filterProperty('read', true).get('length');
  }).property('@each.read'),
  unreadCount: (function() {
    return this.filterProperty('read', false).get('length');
  }).property('@each.read'),
  starredCount: (function() {
    return this.filterProperty('starred', true).get('length');
  }).property('@each.starred')
});

RSSReader.itemController = Em.ArrayController.create({
  content: [],
  currentList: 'showDefault',
  refreshList: function(callbackFn) {
    console.log('currentList', this.get('currentList'));
    return RSSReader.GetItemsFromStore(this.get('currentList'), callbackFn);
  },
  filterBy: function(key, value) {
    return this.set('content', RSSReader.dataController.filterProperty(key, value));
  },
  clearFilter: function() {
    return this.set('content', RSSReader.dataController.get('content'));
  },
  showDefault: function() {
    this.filterBy('read', false);
    return this.set('currentList', 'showRead');
  },
  showAll: function() {
    console.log('show all');
    this.clearFilter();
    return this.set('currentList', 'showAll');
  },
  showRead: function() {
    this.filterBy('read', true);
    return this.set('currentList', 'showRead');
  },
  showStarred: function() {
    this.filterBy('starred', true);
    return this.set('currentList', 'showStarred');
  },
  showUnread: function() {
    this.filterBy('read', false);
    return this.set('currentList', 'showUnread');
  },
  markAllRead: function() {
    return this.forEach(function(item) {
      return item.set('read', true);
    });
  },
  itemCount: (function() {
    return this.get('length');
  }).property('@each'),
  readCount: (function() {
    return this.filterProperty('read', true).get('length');
  }).property('@each.read'),
  unreadCount: (function() {
    return this.filterProperty('read', false).get('length');
  }).property('@each.read'),
  starredCount: (function() {
    return this.filterProperty('starred', true).get('length');
  }).property('@each.starred')
});

RSSReader.itemNavController = Em.Object.create({
  currentItem: null,
  hasPrev: false,
  hasNext: false,
  select: function(item) {
    var currentIndex;
    if (item) {
      this.set('currentItem', item);
      this.toggleRead(true);
      currentIndex = RSSReader.itemController.content.indexOf(this.get('currentItem'));
      this.set('hasNext', currentIndex + 1 < RSSReader.itemController.get('itemCount'));
      return this.set('hasPrev', currentIndex !== 0);
    } else {
      this.set('hasPrev', false);
      return this.set('hasNext', false);
    }
  },
  toggleRead: function(read) {
    var key;
    if (read === void 0) {
      read = !this.currentItem.get('read');
    }
    this.currentItem.set('read', read);
    key = this.currentItem.get('item_id');
    return store.get(key, function(entry) {
      entry.read = read;
      return store.save(entry);
    });
  },
  toggleStar: function(star) {
    var key;
    if (star === void 0) {
      star = !this.currentItem.get('starred');
    }
    this.currentItem.set('starred', star);
    key = this.currentItem.get('item_id');
    return store.get(key, function(entry) {
      entry.starred = star;
      return store.save(entry);
    });
  },
  next: function() {
    var currentIndex, nextItem;
    currentIndex = RSSReader.itemController.content.indexOf(this.get('currentItem'));
    nextItem = RSSReader.itemController.content[currentIndex + 1];
    if (nextItem) {
      return this.select(nextItem);
    }
  },
  prev: function() {
    var currentIndex, prevItem;
    currentIndex = RSSReader.itemController.content.indexOf(this.get('currentItem'));
    prevItem = RSSReader.itemController.content[currentIndex - 1];
    if (prevItem) {
      return this.select(prevItem);
    }
  }
});

RSSReader.navbarController = Em.ArrayController.create({
  content: [],
  currentPage: listNavJson,
  tab: (function() {
    var btn, _i, _len, _ref, _results;
    this.clear();
    _ref = this.get('currentPage');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      btn = _ref[_i];
      _results.push(this.pushObject(RSSReader.NavButton.create(btn)));
    }
    return _results;
  }).observes('currentPage')
});

RSSReader.subscriptionController = Em.ArrayController.create({
  content: [],
  addUrl: null,
  addTitle: null,
  addItem: function(item) {
    var exists;
    if (!item) {
      item = {
        url: this.get('addUrl'),
        title: this.get('addTitle')
      };
    }
    exists = this.filterProperty('url', item.url).length;
    if (exists === 0) {
      subscriptionData.save(item);
      this.pushObject(RSSReader.Subscription.create(item));
      console.log(this.get('content'));
      return true;
    } else {
      return false;
    }
  }
});

RSSReader.Item = Em.Object.extend({
  read: false,
  starred: false,
  item_id: null,
  title: null,
  short_desc: null,
  content: null,
  pub_name: null,
  pub_author: null,
  pub_date: new Date(0),
  feed_link: null,
  item_link: null
});

RSSReader.NavButton = Em.Object.extend({
  currentListBinding: 'RSSReader.itemController.currentList',
  itemCountBinding: 'RSSReader.dataController.itemCount',
  unreadCountBinding: 'RSSReader.dataController.unreadCount',
  starredCountBinding: 'RSSReader.dataController.starredCount',
  readCountBinding: 'RSSReader.dataController.readCount',
  url: null,
  title: null,
  icon: null,
  countName: null,
  count: (function() {
    return this.get(this.get('countName'));
  }).property('countName'),
  enabled: (function() {
    var cn, str;
    cn = this.get('countName');
    if (cn) {
      if (this.get('currentList') === 'showDefault') {
        return 'unreadCount' === this.get('countName');
      } else {
        str = cn.replace('Count', '');
        return this.get('currentList') === 'show' + str.charAt(0).toUpperCase() + str.substr(1);
      }
    } else {
      return false;
    }
  }).property('currentList'),
  action: null
});

RSSReader.Subscription = Em.Object.extend({
  url: null,
  title: null,
  icon: null
});

RSSReader.ListView = Em.View.extend({
  templateName: 'listview',
  elementId: 'list-view'
});

RSSReader.CurrentView = Em.View.extend({
  templateName: 'current',
  elementId: 'current-view'
});

RSSReader.SubscriptionView = Em.CollectionView.extend({
  contentBinding: 'RSSReader.subscriptionController.content',
  tagName: 'ul',
  classNames: ['rounded'],
  itemViewClass: Em.View.extend({
    tagName: 'li',
    classNames: ['arrow'],
    elementId: (function() {
      return this.get('content').url;
    }).property('content'),
    click: function() {
      console.log('click', this.get('elementId'));
      return RSSReader.GetItemsFromStore(this.get('elementId'));
    }
  })
});

RSSReader.AddSubscriptionView = Em.View.extend({
  click: function() {
    return RSSReader.subscriptionController.addItem();
  }
});

RSSReader.FooterNavBarView = Em.CollectionView.extend({
  contentBinding: 'RSSReader.navbarController.content',
  tagName: 'ul',
  itemViewClass: Em.View.extend({
    enabled: true,
    tagName: 'li',
    click: function() {
      console.log(this.get('content').get('currentList'));
      return RSSReader.itemController[this.get('content').get('action')]();
    }
  })
});

RSSReader.SummaryListView = Em.CollectionView.extend({
  classNames: ['plastic', 'view'],
  tagName: 'ul',
  itemViewClass: RSSReader.ListItemView,
  contentLengthDidChange: (function() {
    var _self;
    console.log('listview changed', this);
    _self = this;
    return Em.run.next(function() {
      return jQT.setPageHeight();
    });
  }).observes('content.length'),
  contentBinding: 'RSSReader.itemController.content',
  didInsertElement: function() {
    console.log('main insert');
    return Em.run.next(function() {
      return RSSReader.pullinit();
    });
  }
});

RSSReader.ListItemView = Em.View.extend({
  classNameBindings: ['read', 'starred'],
  read: (function() {
    var read;
    return read = this.get('content').get('read');
  }).property('RSSReader.itemController.@each.read'),
  starred: (function() {
    var starred;
    return starred = this.get('content').get('starred');
  }).property('RSSReader.itemController.@each.starred'),
  click: function(evt) {
    var content;
    console.log('select', this.get('content'));
    content = this.get('content');
    RSSReader.itemNavController.select(content);
    return jQT.goTo('#current-view', 'slideleft');
  },
  dateFromNow: (function() {
    return moment(this.get('content').get('pub_date')).fromNow();
  }).property('RSSReader.itemController.@each.pub_date')
});

RSSReader.NavbarView = Em.View.extend({
  currentListBinding: 'RSSReader.itemController.currentList',
  itemCountBinding: 'RSSReader.dataController.itemCount',
  unreadCountBinding: 'RSSReader.dataController.unreadCount',
  starredCountBinding: 'RSSReader.dataController.starredCount',
  readCountBinding: 'RSSReader.dataController.readCount',
  showAll: function() {
    RSSReader.itemController.clearFilter();
    return this.set('currentList', 'showAll');
  },
  showUnread: function() {
    RSSReader.itemController.filterBy('read', false);
    return this.set('currentList', 'showUnread');
  },
  showRead: function() {
    RSSReader.itemController.filterBy('read', true);
    return this.set('currentList', 'showRead');
  },
  showStarred: function() {
    RSSReader.itemController.filterBy('starred', true);
    return this.set('currentList', 'showStarred');
  }
});

RSSReader.EntryItemView = Em.View.extend({
  contentBinding: 'RSSReader.itemNavController.currentItem',
  viewDidChange: (function() {
    console.log('view change');
    return jQT.setPageHeight();
  }).observes('content')
});
