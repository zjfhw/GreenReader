// Generated by CoffeeScript 1.3.3
var RSSReader;

RSSReader = Em.Application.create({
  ready: function() {
    return this._super();
  }
});

RSSReader.SummaryListView = Em.View.extend({
  tagName: 'article',
  classNames: ['well', 'summary'],
  classNameBindings: ['read', 'starred'],
  read: (function() {
    var read;
    return read = this.get('content').get('read');
  }).property('RSSReader.itemController.@each.read'),
  starred: (function() {
    var starred;
    return starred = this.get('content').get('starred');
  }).property('RSSReader.itemController.@each.starred')
});

RSSReader.NavBarView = Em.View.extend({
  itemCountBinding: 'RSSReader.dataController.itemCount',
  unreadCountBinding: 'RSSReader.dataController.unreadCount',
  starredCountBinding: 'RSSReader.dataController.starredCount',
  readCountBinding: 'RSSReader.dataController.readCount',
  showAll: function() {
    return RSSReader.itemController.clearFilter();
  },
  showUnread: function() {
    return RSSReader.itemController.filterBy('read', false);
  },
  showRead: function() {
    return RSSReader.itemController.filterBy('read', true);
  },
  showStarred: function() {
    return RSSReader.itemController.filterBy('starred', true);
  }
});

RSSReader.Item = Em.Object.extend({
  read: false,
  starred: false,
  item_id: null,
  title: null,
  short_desc: null,
  content: null,
  pub_name: null,
  pub_author: null,
  pub_date: new Date(0),
  feed_link: null,
  item_link: null
});

RSSReader.dataController = Em.ArrayController.create({
  content: [],
  addItem: function(item) {
    var exists, idx, length;
    exists = this.filterProperty('item_id', item.item_id).length;
    if (exists === 0) {
      length = this.get('length');
      idx = this.binarySearch(Date.parse(item.get('pub_date')), 0, length);
      this.insertAt(idx, item);
      return true;
    } else {
      return false;
    }
  },
  binarySearch: function(value, low, high) {
    var mid, midValue;
    if (low === high) {
      return low;
    }
    mid = low + Math.floor((high - low) / 2);
    midValue = Date.parse(this.objectAt(mid).get('pub_date'));
    if (value < midValue) {
      return this.binarySearch(value, mid + 1, high);
    } else if (value > midValue) {
      return this.binarySearch(value, low, mid);
    }
    return mid;
  },
  itemCount: (function() {
    return this.get('length');
  }).property('@each'),
  readCount: (function() {
    return this.filterPorperty('read', true.get('length'));
  }).property('@each.read'),
  unreadCount: (function() {
    return this.filterPorperty('read', false.get('length'));
  }).property('each.read'),
  starredCount: (function() {
    return this.filterPorperty('starred', true.get('length'));
  }).property('@each.starred')
});

RSSReader.itemController = Em.ArrayController.create({
  content: [],
  filterBy: function() {
    return this.set('content', RSSReader.dataController.filterPorperty(key, value));
  },
  clearFilter: function() {
    return this.set('content', RSSReader.dataController.get('content'));
  },
  showDefault: function() {
    return this.filterBy('read', false);
  },
  markAllRead: function() {
    return this.forEach(function(item) {
      return item.set('read', true);
    });
  },
  itemCount: (function() {
    return this.get('length');
  }).property('@each'),
  readCount: (function() {
    return this.filterPorperty('read', true.get('length'));
  }).property('@each.read'),
  unreadCount: (function() {
    return this.filterPorperty('read', false.get('length'));
  }).property('each.read'),
  starredCount: (function() {
    return this.filterPorperty('starred', true.get('length'));
  }).property('@each.starred')
});
